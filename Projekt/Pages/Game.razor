@page "/game"
@inject IJSRuntime JSRuntime

<PageTitle>Spel</PageTitle>

<h1>Spel</h1>
<audio @ref="backgroundMusic" id="backgroundMusic" autoplay loop>
    <source src="/sound/theme.mp3" type="audio/mpeg">
    Din webbläsare stöder inte audio elementet.
</audio>

    <div class="game-board" style="width:@(gameBoard.Width)px; height:@(gameBoard.Height)px;" tabindex="0"
         @onkeydown="HandleKeyPress" @onkeyup="HandleKeyUp">

    @if (currentState == GameState.StartMenu)
    {
        <div class="menu-overlay">
            <button @onclick="StartGame">Starta Spel</button>
        </div>
    }
    else if (currentState == GameState.GameOver)
    {
        <div class="menu-overlay">
            <p>Game Over</p>
            <button @onclick="() => gameManager.RestartGame()">Spela Igen</button>
        </div>    }

        <div class="top-bar">
            <div class="lives-container">
                @for (int i = 0; i < player.Lives; i++)
                {
                    <img src="images/heart_full.png" />
                }
                @for (int i = player.Lives; i < 3; i++)
                {
                    <img src="images/heart_empty.png" />
                }
            </div>
            <div class="diamonds-container">
                <img src="images/diamond.png" style="padding-right:5px" />
                @player.CollectedDiamonds / @totalDiamonds
            </div>

            <div id="music-checkbox">
                <label for="music-toggle" class="label-text">Bakgrundsmusik</label>
                <input type="checkbox" @onchange="ToggleMusic" checked="@isMusicPlaying" id="music-toggle" />
            </div>

        </div>

         @foreach (var enemy in enemies)
        {
            <div class="enemy" style="left:@(enemy.X)px; top:@(enemy.Y)px; width:@(enemy.Width)px; height:@(enemy.Height)px;"></div>
        }

        <div class="player" style="left:@(player.X)px; top:@(player.Y)px;"></div>

        @foreach (var platform in platforms)
        {
            <div class="platform" style="left:@(platform.X)px; top:@(platform.Y)px;">
                <img src="images/platformLeftEnd.png" />
                @for (int i = 0; i < platform.Width / 18 - 2; i++)
                {
                    <img src="images/platformMiddle.png" />
                }
                <img src="images/platformRightEnd.png" />
            </div>
        }

        @foreach (var diamond in diamonds)
        {
            <img src="/images/diamond.png" class="diamond" style="left:@(diamond.X)px; top:@(diamond.Y)px;" />
        }
    </div>

@code {
    private Player player;
    private GameBoard gameBoard;
    private Timer gameLoopTimer;
    private bool movingLeft = false;
    private bool movingRight = false;
    private bool jumping = false;
    private List<Platform> platforms = new List<Platform>();
    private List<Enemy> enemies = new List<Enemy>();
    private ElementReference backgroundMusic;
    private bool isMusicPlaying = true;
    private int groundLevel;
    private List<Diamond> diamonds = new List<Diamond>();
    private int totalDiamonds;
    public enum GameState
    {
        StartMenu,
        InGame,
        GameOver
    }
    private GameState currentState = GameState.StartMenu;
    private GameManager gameManager = new GameManager();

    protected override void OnInitialized()
    {
        gameBoard = new GameBoard { Width = 800, Height = 600 };
        player = new Player { X = 0, IsOnGround = true };
        player.Y = gameBoard.Height - player.Height;
        groundLevel = gameBoard.Height - player.Height;
        gameLoopTimer = new Timer(_ => GameLoop(), null, 0, 30);
        totalDiamonds = diamonds.Count;
        gameManager.OnStateChanged = StateHasChanged;
    }

    private void HandleKeyPress(KeyboardEventArgs e)
    {
        switch (e.Key)
        {
            case "ArrowLeft":
                movingLeft = true;
                break;
            case "ArrowRight":
                movingRight = true;
                break;
            case " ":
                jumping = true;
                break;
        }
    }

    private void HandleKeyUp(KeyboardEventArgs e)
    {
        switch (e.Key)
        {
            case "ArrowLeft":
                movingLeft = false;
                break;
            case "ArrowRight":
                movingRight = false;
                break;
            case " ":
                jumping = false;
                break;
        }
    }

    private void StartGame()
    {
        gameManager.StartGame();
        LoadLevel(gameManager.CurrentLevel);
    }

    private void LoadLevel(int levelNumber)
    {
        // Rensa nuvarande speldata
        platforms.Clear();
        diamonds.Clear();
        enemies.Clear();

        // Lägg till ny speldata baserat på level
        var levelData = gameManager.GetLevelData(levelNumber);
        platforms.AddRange(levelData.Platforms);
        diamonds.AddRange(levelData.Diamonds);
        enemies.AddRange(levelData.Enemies);

        // Återställ spelaren
        ResetPlayer();

        // Uppdatera totala antalet diamanter
        totalDiamonds = diamonds.Count;

        currentState = GameState.InGame;
    }

    private void ResetPlayer()
    {
        // Återställ spelare till startpositionen
        player = new Player { X = 0, Y = gameBoard.Height - player.Height, Lives = 3, IsOnGround = true };
    }

    private void GameLoop()
    {
        foreach (var enemy in enemies)
        {
            enemy.Move(gameBoard);

            bool collisionDetected = player.CheckCollisionWithEnemy(enemy);
            if (collisionDetected)
            {
                if (player.Lives <= 0)
                {
                    // Hantera Game Over
                    currentState = GameState.GameOver;
                    break; // Bryt ut ur loopen om spelet är över
                }
            }
        }

        player.PreviousY = player.Y;

        // Hantera spelarrörelse och kollision
        if (movingLeft) { player.MoveLeft(5, gameBoard.Width); }
        if (movingRight) { player.MoveRight(5, gameBoard.Width); }


        player.ApplyGravity(2, platforms, groundLevel);
        player.CheckIfOnGround(platforms, groundLevel);

        if (jumping && player.IsOnGround) { player.Jump(); }

        if (player.CollectedDiamonds == totalDiamonds)
        {
            // Alla diamanter har samlats in, banan klar
            // TODO: Gå till nästa bana
        }

        player.CollectDiamonds(diamonds);
        StateHasChanged();
    }

    private async Task PlayMusic()
    {
        await JSRuntime.InvokeVoidAsync("playAudio", backgroundMusic);
    }

    private async Task PauseMusic()
    {
        await JSRuntime.InvokeVoidAsync("pauseAudio", backgroundMusic);
    }

    private async Task ToggleMusic()
    {
        isMusicPlaying = !isMusicPlaying;

        if (isMusicPlaying)
        {
            await PlayMusic();
        }
        else
        {
            await PauseMusic();
        }
    }

    public void Dispose()
    {
        gameLoopTimer?.Dispose();
    }
}
